import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import json
from datetime import datetime, timedelta
import numpy as np
from streamlit_option_menu import option_menu
import warnings

# –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ ScriptRunContext
warnings.filterwarnings("ignore", message=".*missing ScriptRunContext.*")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="MoskSibBusiness Analytics",
    page_icon="üè¢",
    layout="wide",
    initial_sidebar_state="expanded"
)

class MoskSibDashboard:
    def __init__(self):
        self.data = {}
        self.selected_period = "–í–µ—Å—å –ø–µ—Ä–∏–æ–¥"
        self.load_all_data()
    
    def load_all_data(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ JSON —Ñ–∞–π–ª—ã —Å –¥–∞–Ω–Ω—ã–º–∏"""
        base_path = r"C:\Users\instl\Desktop\Hakaton"
        
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            with open(f"{base_path}/sfera_code_mock_data.json", 'r', encoding='utf-8') as f:
                self.data['sfera'] = json.load(f)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            with open(f"{base_path}/user_activity_stats.json", 'r', encoding='utf-8') as f:
                self.data['user_stats'] = json.load(f)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–Ω–∞–ª–∏–∑ –∫–æ–º–º–∏—Ç–æ–≤
            with open(f"{base_path}/commits_analysis_data.json", 'r', encoding='utf-8') as f:
                self.data['commits_analysis'] = json.load(f)
                
            st.sidebar.success("‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
            
        except FileNotFoundError as e:
            st.error(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
        except json.JSONDecodeError as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON: {e}")
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    def filter_data_by_period(self, df, date_column='created_at'):
        """–§–∏–ª—å—Ç—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ø–µ—Ä–∏–æ–¥—É"""
        if self.selected_period == "–í–µ—Å—å –ø–µ—Ä–∏–æ–¥":
            return df
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞
        if self.selected_period == "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π":
            start_date = datetime.now() - timedelta(days=30)
        else:  # "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 90 –¥–Ω–µ–π"
            start_date = datetime.now() - timedelta(days=90)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        df[date_column] = pd.to_datetime(df[date_column])
        filtered_df = df[df[date_column] >= start_date]
        
        return filtered_df
    
    def create_sidebar(self):
        """–°–æ–∑–¥–∞–µ—Ç –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å"""
        with st.sidebar:
            # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            st.markdown("## üè¢ MoskSib Business")
            st.markdown("---")
            
            # –ù–∞–≤–∏–≥–∞—Ü–∏—è
            selected = option_menu(
                menu_title="–ú–µ–Ω—é",
                options=["üìä –û–±–∑–æ—Ä", "üë• –ö–æ–º–∞–Ω–¥–∞", "üìà –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", "üèÜ –†–µ–π—Ç–∏–Ω–≥–∏", "‚öôÔ∏è –ê–Ω–∞–ª–∏—Ç–∏–∫–∞"],
                icons=["speedometer2", "people", "activity", "trophy", "graph-up"],
                default_index=0,
                styles={
                    "container": {"padding": "5px"},
                    "icon": {"color": "orange", "font-size": "18px"}, 
                    "nav-link": {"font-size": "16px", "text-align": "left", "margin":"0px"},
                    "nav-link-selected": {"background-color": "#1E3A8A"},
                }
            )
            
            st.markdown("---")
            st.markdown("### üìÖ –ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
            self.selected_period = st.selectbox(
                "", 
                ["–ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π", "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 90 –¥–Ω–µ–π", "–í–µ—Å—å –ø–µ—Ä–∏–æ–¥"],
                key="period_selector"
            )
            
            st.info(f"–ê–∫—Ç–∏–≤–Ω—ã–π –ø–µ—Ä–∏–æ–¥: {self.selected_period}")
            
            st.markdown("---")
            st.markdown("### üë• –ö–æ–º–∞–Ω–¥–∞")
            if 'sfera' in self.data:
                st.metric("–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤", len(self.data['sfera'].get('users', [])))
                st.metric("–ü—Ä–æ–µ–∫—Ç–æ–≤", len(self.data['sfera'].get('projects', [])))
            
            return selected
    
    def show_overview(self):
        """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –æ–±–∑–æ—Ä–æ–º"""
        st.title("üè¢ MoskSib Business Analytics")
        st.markdown("–ü–∞–Ω–µ–ª—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
        st.info(f"üìÖ –ê–∫—Ç–∏–≤–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞: **{self.selected_period}**")
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            total_commits = self.get_filtered_commits_count()
            st.metric("üìù –ö–æ–º–º–∏—Ç–æ–≤", total_commits)
        
        with col2:
            total_users = self.data.get('user_stats', {}).get('total_users', 0)
            st.metric("üë• –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤", total_users)
        
        with col3:
            total_repos = self.data.get('user_stats', {}).get('total_repositories', 0)
            st.metric("üìÅ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤", total_repos)
        
        with col4:
            avg_commits = total_commits / total_users if total_users > 0 else 0
            st.metric("‚ö° –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å/—á–µ–ª", f"{avg_commits:.1f}")
        
        st.markdown("---")
        
        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        col1, col2 = st.columns(2)
        
        with col1:
            self.show_commit_timeline()
        
        with col2:
            self.show_user_activity_chart()
    
    def get_filtered_commits_count(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–∏—Ç–æ–≤ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥"""
        if 'sfera' not in self.data or 'commits' not in self.data['sfera']:
            return 0
        
        commits = self.data['sfera']['commits']
        df = pd.DataFrame(commits)
        
        if self.selected_period == "–í–µ—Å—å –ø–µ—Ä–∏–æ–¥":
            return len(df)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –ø–µ—Ä–∏–æ–¥—É
        filtered_df = self.filter_data_by_period(df)
        return len(filtered_df)
    
    def show_commit_timeline(self):
        """–ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–æ–º–º–∏—Ç–æ–≤"""
        st.subheader("üìà –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–æ–º–º–∏—Ç–æ–≤")
        
        if 'sfera' not in self.data or 'commits' not in self.data['sfera']:
            st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∫–æ–º–º–∏—Ç–∞—Ö")
            return
        
        commits = self.data['sfera']['commits']
        df = pd.DataFrame(commits)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é
        filtered_df = self.filter_data_by_period(df)
        
        if len(filtered_df) == 0:
            st.warning(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥: {self.selected_period}")
            return
        
        filtered_df['created_at'] = pd.to_datetime(filtered_df['created_at'])
        filtered_df['date'] = filtered_df['created_at'].dt.date
        
        # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º
        daily_activity = filtered_df.groupby('date').size().reset_index(name='commits')
        
        fig = px.line(
            daily_activity, 
            x='date', 
            y='commits',
            title=f"–ö–æ–º–º–∏—Ç—ã –ø–æ –¥–Ω—è–º ({self.selected_period})",
            labels={'date': '–î–∞—Ç–∞', 'commits': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–∏—Ç–æ–≤'}
        )
        fig.update_traces(line=dict(color="#1E3A8A", width=3))
        st.plotly_chart(fig, use_container_width=True)
    
    def show_user_activity_chart(self):
        """–ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        st.subheader("üë• –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤")
        
        if 'user_stats' not in self.data or 'user_activity' not in self.data['user_stats']:
            st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö")
            return
        
        user_activity = self.data['user_stats']['user_activity']
        users_data = []
        
        for email, data in user_activity.items():
            users_data.append({
                'name': data['name'],
                'commits': data['commit_count'],
                'repositories': data['repositories_count']
            })
        
        df = pd.DataFrame(users_data)
        df = df.nlargest(10, 'commits')
        
        fig = px.bar(
            df,
            x='name',
            y='commits',
            title="–¢–æ–ø —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø–æ –∫–æ–º–º–∏—Ç–∞–º",
            labels={'name': '–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫', 'commits': '–ö–æ–º–º–∏—Ç—ã'},
            color='commits',
            color_continuous_scale='blues'
        )
        st.plotly_chart(fig, use_container_width=True)
    
    def show_team_analytics(self):
        """–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã"""
        st.title("üë• –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã")
        
        if 'user_stats' not in self.data:
            st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∫–æ–º–∞–Ω–¥–µ")
            return
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
            user_activity = self.data['user_stats']['user_activity']
            
            names = [data['name'] for data in user_activity.values()]
            commits = [data['commit_count'] for data in user_activity.values()]
            
            fig_pie = px.pie(
                values=commits,
                names=names,
                title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–æ–≤ –º–µ–∂–¥—É —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏"
            )
            st.plotly_chart(fig_pie, use_container_width=True)
        
        with col2:
            st.subheader("üìà –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
            
            user_activity = self.data['user_stats']['user_activity']
            for email, data in list(user_activity.items())[:5]:
                with st.expander(f"üë§ {data['name']}"):
                    col_a, col_b = st.columns(2)
                    with col_a:
                        st.metric("–ö–æ–º–º–∏—Ç—ã", data['commit_count'])
                    with col_b:
                        st.metric("–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏", data['repositories_count'])
                    
                    if 'first_commit' in data and 'last_commit' in data:
                        st.caption(f"–ü–µ—Ä–≤—ã–π –∫–æ–º–º–∏—Ç: {data['first_commit'][:10]}")
                        st.caption(f"–ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç: {data['last_commit'][:10]}")
    
    def show_activity_analytics(self):
        """–î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        st.title("üìà –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
        st.info(f"üìÖ –ê–∫—Ç–∏–≤–Ω—ã–π –ø–µ—Ä–∏–æ–¥: {self.selected_period}")
        
        if 'sfera' not in self.data:
            return
        
        commits = self.data['sfera']['commits']
        df = pd.DataFrame(commits)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é
        filtered_df = self.filter_data_by_period(df)
        
        if len(filtered_df) == 0:
            st.warning(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥: {self.selected_period}")
            return
        
        filtered_df['created_at'] = pd.to_datetime(filtered_df['created_at'])
        filtered_df['hour'] = filtered_df['created_at'].dt.hour
        filtered_df['day_of_week'] = filtered_df['created_at'].dt.day_name()
        
        tab1, tab2, tab3 = st.tabs(["‚è∞ –ü–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫", "üìÖ –ü–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏", "üìã –î–µ—Ç–∞–ª–∏ –∫–æ–º–º–∏—Ç–æ–≤"])
        
        with tab1:
            hourly = filtered_df.groupby('hour').size().reset_index(name='count')
            fig_hourly = px.bar(
                hourly,
                x='hour',
                y='count',
                title=f"–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫ ({self.selected_period})",
                labels={'hour': '–ß–∞—Å –¥–Ω—è', 'count': '–ö–æ–º–º–∏—Ç—ã'}
            )
            st.plotly_chart(fig_hourly, use_container_width=True)
        
        with tab2:
            weekday_order = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
            weekday_data = filtered_df.groupby('day_of_week').size().reindex(weekday_order, fill_value=0).reset_index(name='count')
            
            fig_weekday = px.bar(
                weekday_data,
                x='day_of_week',
                y='count',
                title=f"–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏ ({self.selected_period})",
                labels={'day_of_week': '–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏', 'count': '–ö–æ–º–º–∏—Ç—ã'}
            )
            st.plotly_chart(fig_weekday, use_container_width=True)
        
        with tab3:
            st.subheader(f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–º–º–∏—Ç—ã ({self.selected_period})")
            recent_commits = sorted(filtered_df.to_dict('records'), key=lambda x: x['created_at'], reverse=True)[:10]
            
            for commit in recent_commits:
                col1, col2 = st.columns([3, 1])
                with col1:
                    st.write(f"**{commit['message']}**")
                    st.caption(f"üë§ {commit['author']['name']} | üïí {commit['created_at']}")
                with col2:
                    st.code(commit['hash'][:8], language='text')
                st.markdown("---")
    
    def show_rankings(self):
        """–†–µ–π—Ç–∏–Ω–≥–∏ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"""
        st.title("üèÜ –†–µ–π—Ç–∏–Ω–≥–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤")
        
        if 'user_stats' not in self.data:
            return
        
        user_activity = self.data['user_stats']['user_activity']
        ranked_users = sorted(
            [(data['name'], data['commit_count']) for data in user_activity.values()],
            key=lambda x: x[1],
            reverse=True
        )
        
        # –¢–æ–ø-3 —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
        col1, col2, col3 = st.columns(3)
        medals = ["ü•á", "ü•à", "ü•â"]
        
        for i, (col, medal) in enumerate(zip([col1, col2, col3], medals)):
            if i < len(ranked_users):
                with col:
                    st.markdown(f"### {medal} {ranked_users[i][0]}")
                    st.metric("–ö–æ–º–º–∏—Ç—ã", ranked_users[i][1])
                    if ranked_users[0][1] > 0:
                        progress = min(ranked_users[i][1] / ranked_users[0][1], 1.0)
                        st.progress(progress)
        
        st.markdown("---")
        
        # –ü–æ–ª–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
        st.subheader("üìä –ü–æ–ª–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –∫–æ–º–∞–Ω–¥—ã")
        
        ranking_data = []
        for name, commits in ranked_users:
            ranking_data.append({
                '–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫': name,
                '–ö–æ–º–º–∏—Ç—ã': commits,
                '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å': '–í—ã—Å–æ–∫–∞—è' if commits > 30 else '–°—Ä–µ–¥–Ω—è—è' if commits > 15 else '–ù–∏–∑–∫–∞—è'
            })
        
        df = pd.DataFrame(ranking_data)
        st.dataframe(df, use_container_width=True, hide_index=True)
    
    def show_advanced_analytics(self):
        """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞"""
        st.title("‚öôÔ∏è –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("üìà –¢—Ä–µ–Ω–¥—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
            if 'sfera' in self.data and 'commits' in self.data['sfera']:
                commits = self.data['sfera']['commits']
                df = pd.DataFrame(commits)
                df = self.filter_data_by_period(df)
                
                if len(df) > 0:
                    df['created_at'] = pd.to_datetime(df['created_at'])
                    df['week'] = df['created_at'].dt.isocalendar().week
                    
                    weekly_trend = df.groupby('week').size().reset_index(name='commits')
                    
                    fig_trend = px.line(
                        weekly_trend,
                        x='week',
                        y='commits',
                        title=f"–¢—Ä–µ–Ω–¥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –Ω–µ–¥–µ–ª—è–º ({self.selected_period})",
                        markers=True
                    )
                    st.plotly_chart(fig_trend, use_container_width=True)
                else:
                    st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞")
        
        with col2:
            st.subheader("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
            
            recommendations = [
                "‚úÖ –û—Ç–ª–∏—á–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥—ã",
                "üìä –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–≤–µ–ª–∏—á–∏—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ –ø—Ä–æ–µ–∫—Ç–∞—Ö —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å –Ω–∏–∑–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é",
                "‚è∞ –ü–∏–∫–æ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è - —Ö–æ—Ä–æ—à–æ",
                "üîÑ –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–æ—Ç–∞—Ü–∏—é –º–µ–∂–¥—É –ø—Ä–æ–µ–∫—Ç–∞–º–∏ –¥–ª—è –æ–±–º–µ–Ω–∞ –æ–ø—ã—Ç–æ–º"
            ]
            
            for rec in recommendations:
                st.info(rec)
    
    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –¥–∞—à–±–æ—Ä–¥"""
        if not self.data:
            st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤.")
            return
        
        # –°–æ–∑–¥–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
        selected_tab = self.create_sidebar()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª
        if selected_tab == "üìä –û–±–∑–æ—Ä":
            self.show_overview()
        elif selected_tab == "üë• –ö–æ–º–∞–Ω–¥–∞":
            self.show_team_analytics()
        elif selected_tab == "üìà –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å":
            self.show_activity_analytics()
        elif selected_tab == "üèÜ –†–µ–π—Ç–∏–Ω–≥–∏":
            self.show_rankings()
        elif selected_tab == "‚öôÔ∏è –ê–Ω–∞–ª–∏—Ç–∏–∫–∞":
            self.show_advanced_analytics()
        
        # –§—É—Ç–µ—Ä
        st.markdown("---")
        st.caption(f"¬© 2025 MoskSib Business | –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {datetime.now().strftime('%Y-%m-%d %H:%M')}")

# –ó–∞–ø—É—Å–∫ –¥–∞—à–±–æ—Ä–¥–∞
if __name__ == "__main__":
    dashboard = MoskSibDashboard()
    dashboard.run()
